#!/bin/sh

# Fail fast
set -e

usage() { echo "Usage: $0 [-z] [-c]" 1>&2; exit 1; }

while getopts ":zc" o; do
    echo "opt: ${o}"
    case "${o}" in
        z)
            # Change default shell to ZSH
            USE_ZSH="yes"
            ;;
        c)
            # install Z shell configuration
            CHSH="yes"
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# This method doesn't seem to work in FreeBSD's Bourne shell-compatible (sh)
# http://stackoverflow.com/a/246128/6740471
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
COMMON_FILES=".vimrc .tmux.conf .screenrc .muttrc .gitconfig .agignore \
    .inputrc .zshrc"
X11_FILES=".Xresources .xinitrc .xsession .urxvt"
MAC_FILES=".bashrc .bash_profile"
OS=$(uname 2> /dev/null)
BACKUPDIR=$(mktemp -d "$HOME/dotfiles.bak.XXXXXX")

[ "$OS" = "Darwin" ] && COMMON_FILES="$COMMON_FILES $MAC_FILES"

# Check if we have a running desktop environment. I am not sure this
# will work for bare window managers without a display manager.
# http://unix.stackexchange.com/a/116694
has_running_de() {
    if [ "$XDG_CURRENT_DESKTOP" = "" ]; then
        desktop=$(echo "$XDG_DATA_DIRS" | sed 's/.*\(xfce\|kde\|gnome\).*/\1/')
    else
        desktop=$XDG_CURRENT_DESKTOP
    fi

    desktop=${desktop,,}  # convert to lower case
    if [ -z "$desktop" ]; then
        return 1
    fi
    return 0
}

has_x11() {
    [ -n "$XDG_VTNR" ] && return 0 || return 1
}

backupfile() {
    local target=$1
    # Remove target if it is a symlink, otherwise copy
    # it to the dotfiles.bak.XXX dir
    if [ -L "$target" ]; then
        rm -f $target
    else
        if [ -f "$target" ]; then
            cp -f $1 $BACKUPDIR
        elif [ -d "$target" ]; then
            mv -f $1 $BACKUPDIR
        fi
    fi
}

cleanup() {
    # Remove backup dir if it is empty
    if [ -z "$(ls -A $BACKUPDIR)" ]; then
        rm -fr $BACKUPDIR
    fi
}
trap cleanup EXIT

# Setup i3 configuration files for Linux
if [ "$OS" != "Darwin" ] && has_x11; then
    i3confdir="$HOME/.config/i3"
    i3conf="$i3confdir/config"
    backupfile "$i3conf"
    mkdir -p "$i3confdir"
    ln -sf "$DIR/config" "$i3conf"

    # i3status
    backupfile "$HOME/.config/i3status/config"
    mkdir -p "$HOME/.config/i3status"
    ln -sf "$DIR/i3status.conf" "$HOME/.config/i3status/config"

    # dunst
    backupfile "$HOME/.config/dunst/dunstrc"
    mkdir -p "$HOME/.config/dunst"
    ln -sf "$DIR/dunstrc" "$HOME/.config/dunst/dunstrc"

    COMMON_FILES="$COMMON_FILES $X11_FILES"
fi

# Create symlinks to common rc files
for f in $COMMON_FILES; do
    target="$HOME/${f##*/}"
    backupfile "$target"

    ln -sf "$DIR/$f" ~/
done

# Install vim plugins
VIM_PREREQS="git curl vim"
for i in $VIM_PREREQS; do
    if ! command -v $i > /dev/null 2>&1; then
        echo "You don't seem to have $i installed on your system."
        echo "$VIM_PREREQS are required to set up VIM properly."
        echo "Don't forget to run this script again after you install"
        echo "prerequisites."
        exit 1
    fi
done

# Create .mutt/cache dir otherwise it complains like "couldn't save certificates"
mkdir -p $HOME/.mutt/cache

export GIT_SSL_NO_VERIFY=true
git clone --depth 1 https://github.com/tmux-plugins/tmux-yank ~/.tmux/plugins/tmux-yank || true

mkdir -p ~/.vim/.backup ~/.vim/.swp ~/.vim/.undo
mkdir -p ~/.vim/autoload
curl --insecure -fLo ~/.vim/autoload/plug.vim \
    https://raw.github.com/junegunn/vim-plug/master/plug.vim
vim +PlugInstall +qall

# neovim setup
mkdir -p ~/.local/share/nvim/site/autoload
mkdir -p ~/.config/nvim
backupfile ~/.config/nvim/init.vim
backupfile ~/.config/nvim/coc-settings.json
backupfile ~/.local/share/nvim/site/autoload/plug.vim
ln -sf ~/.dotfiles/.vimrc ~/.config/nvim/init.vim
ln -sf ~/.dotfiles/coc-settings.json ~/.config/nvim/
ln -sf ~/.vim/autoload/plug.vim ~/.local/share/nvim/site/autoload/plug.vim
command -v nvim > /dev/null && nvim +PlugInstall +UpdateRemotePlugins +qall

if [ ! -z $USE_ZSH ]; then
    # zsh setup
    git clone https://github.com/robbyrussell/oh-my-zsh.git \
        ~/.oh-my-zsh > /dev/null 2>&1 | true
    git clone https://github.com/zsh-users/zsh-autosuggestions \
        ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions > /dev/null 2>&1 | true

    if [ ! -z $CHSH ] && command -v zsh > /dev/null 2>&1; then
        chsh -s $(which zsh)
    fi
fi
